bmi_category <- cut(bmi, breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
labels = c("Underweight", "Normal", "Overweight", "Obese"))
# Simulate fat percentage categories
fat_percentage_category <- sample(c("Low", "Moderate", "High", "Extreme"), num_rows, replace = TRUE)
# Height categories (e.g., Low, Medium, High)
height_category <- cut(height, breaks = c(-Inf, 160, 180, Inf),
labels = c("Short", "Average", "Tall"))
# Combine all variables into a data frame
data.frame(
subject_id, gender, height, weight, ankle, wrist, waist_hip_ratio,
height_hip_ratio, bmi, bmi_category, fat_percentage_category, height_category
)
}
# Test 1: Check if the dataset contains the expected columns
test_that("Dataset has expected columns", {
simulated_data <- simulate_data()
expected_columns <- c("subject_id", "gender", "height", "weight", "ankle", "wrist",
"waist_hip_ratio", "height_hip_ratio", "bmi", "bmi_category",
"fat_percentage_category", "height_category")
expect_true(all(expected_columns %in% colnames(simulated_data)))
})
# Test 2: Check if all BMI values are within a reasonable range (18.5 to 40)
test_that("BMI values are within a reasonable range", {
simulated_data <- simulate_data()
expect_true(all(simulated_data$bmi >= 10 & simulated_data$bmi <= 70))
})
# Test 3: Ensure that the gender column only contains "Male" or "Female"
test_that("Gender values are correct", {
simulated_data <- simulate_data()
expect_true(all(simulated_data$gender %in% c("Male", "Female")))
})
# Test 4: Ensure the height categories are valid
test_that("Height categories are correct", {
simulated_data <- simulate_data()
expect_true(all(simulated_data$height_category %in% c("Short", "Average", "Tall")))
})
# Test 5: Check if fat_percentage_category has the expected values
test_that("Fat percentage categories are correct", {
simulated_data <- simulate_data()
expect_true(all(simulated_data$fat_percentage_category %in% c("Low", "Moderate", "High", "Extreme")))
})
# Test 6: Check that the waist_hip_ratio is within the expected range (0.6 to 1.0)
test_that("Waist-hip ratio is within range", {
simulated_data <- simulate_data()
expect_true(all(simulated_data$waist_hip_ratio >= 0.6 & simulated_data$waist_hip_ratio <= 1.0))
})
# Test 7: Verify that height_hip_ratio is calculated correctly
test_that("Height-to-hip ratio is calculated correctly", {
simulated_data <- simulate_data()
expect_true(all(simulated_data$height_hip_ratio == simulated_data$height / (simulated_data$waist_hip_ratio * 2)))
})
colnames(body_mass_model)
#### Preamble ####
# Purpose: Simulates Body Composition data
# Author: Aamishi Avarsekar
# Date: 3rd December 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# This code was written by ChatGPT
set.seed(123)  # For reproducibility
# Number of rows to simulate
n <- 1000
# Simulate the columns
body_mass_model <- data.frame(
gender = sample(c("Male", "Female"), n, replace = TRUE),
age = sample(18:80, n, replace = TRUE),
height = rnorm(n, mean = 170, sd = 10),  # average height with some variability
weight = rnorm(n, mean = 70, sd = 15),   # average weight with some variability
bmi = rnorm(n, mean = 25, sd = 5),       # typical BMI range
fat_mass_kg = rnorm(n, mean = 15, sd = 5),
fm = rnorm(n, mean = 20, sd = 8),        # fat mass in kg
ffm_kg = rnorm(n, mean = 50, sd = 10),   # fat-free mass in kg
bone_mass_kg = rnorm(n, mean = 3, sd = 1),
muscle_mass_kg = rnorm(n, mean = 30, sd = 7),
bmr_kcal = rnorm(n, mean = 1500, sd = 300),  # basal metabolic rate
fm_trunk = rnorm(n, mean = 7, sd = 2),   # fat mass in trunk area
bmi_category = sample(c("Underweight", "Normal", "Overweight", "Obese"), n, replace = TRUE),
fat_percentage_category = sample(c("Low", "Moderate", "High", "Extreme"), n, replace = TRUE),
height_category = sample(c("Short", "Average", "Tall"), n, replace = TRUE),
predicted_category = sample(c("Low", "Moderate", "High", "Extreme"), n, replace = TRUE),
weight_category = sample(c("Underweight", "Normal", "Overweight", "Obese"), n, replace = TRUE)
)
# View first few rows of the simulated data
head(body_mass_model)
#### Preamble ####
# Purpose: Simulates Body Composition data
# Author: Aamishi Avarsekar
# Date: 3rd December 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# This code was written by ChatGPT
set.seed(123)  # For reproducibility
# Number of rows to simulate
n <- 1000
# Simulate the columns
body_mass_testing <- data.frame(
gender = sample(c("Male", "Female"), n, replace = TRUE),
age = sample(18:80, n, replace = TRUE),
height = rnorm(n, mean = 170, sd = 10),  # average height with some variability
weight = rnorm(n, mean = 70, sd = 15),   # average weight with some variability
bmi = rnorm(n, mean = 25, sd = 5),       # typical BMI range
fat_mass_kg = rnorm(n, mean = 15, sd = 5),
fm = rnorm(n, mean = 20, sd = 8),        # fat mass in kg
ffm_kg = rnorm(n, mean = 50, sd = 10),   # fat-free mass in kg
bone_mass_kg = rnorm(n, mean = 3, sd = 1),
muscle_mass_kg = rnorm(n, mean = 30, sd = 7),
bmr_kcal = rnorm(n, mean = 1500, sd = 300),  # basal metabolic rate
fm_trunk = rnorm(n, mean = 7, sd = 2),   # fat mass in trunk area
bmi_category = sample(c("Underweight", "Normal", "Overweight", "Obese"), n, replace = TRUE),
fat_percentage_category = sample(c("Low", "Moderate", "High", "Extreme"), n, replace = TRUE),
height_category = sample(c("Short", "Average", "Tall"), n, replace = TRUE),
predicted_category = sample(c("Low", "Moderate", "High", "Extreme"), n, replace = TRUE),
weight_category = sample(c("Underweight", "Normal", "Overweight", "Obese"), n, replace = TRUE)
)
# View first few rows of the simulated data
head(body_mass_testing)
#### Preamble ####
# Purpose: Tests Body Composition data
# Author: Aamishi Avarsekar
# Date: 3rd December 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# This was written by ChatGPT
# Load necessary libraries for testing
library(testthat)
# 1. Test if the data frame has the correct number of rows and columns
test_that("Data frame has correct number of rows and columns", {
expect_equal(ncol(body_mass_model), 17)  # Should have 17 columns
expect_equal(nrow(body_mass_model), 1000)  # Should have 1000 rows
})
# 2. Test if the gender column contains only valid values (Male, Female)
test_that("Gender column contains only valid values", {
expect_true(all(body_mass_model$gender %in% c("Male", "Female")))
})
# 3. Test if age column is within the expected range (18 to 80 years)
test_that("Age column is within the expected range", {
expect_true(all(body_mass_model$age >= 18 & body_mass_model$age <= 80))
})
# 4. Test if height column has values greater than zero
test_that("Height column has positive values", {
expect_true(all(body_mass_model$height > 0))
})
# 5. Test if weight column has values greater than zero
test_that("Weight column has positive values", {
expect_true(all(body_mass_model$weight > 0))
})
# 6. Test if bmi column has valid values within a reasonable range (e.g., 10 to 50)
test_that("BMI column is within a reasonable range", {
expect_true(all(body_mass_model$bmi >= 10 & body_mass_model$bmi <= 50))
})
#### Preamble ####
# Purpose: Tests Body Composition data
# Author: Aamishi Avarsekar
# Date: 3rd December 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# This was written by ChatGPT
# Load necessary libraries for testing
library(testthat)
# 1. Test if the data frame has the correct number of rows and columns
test_that("Data frame has correct number of rows and columns", {
expect_equal(ncol(body_mass_model), 17)  # Should have 17 columns
expect_equal(nrow(body_mass_model), 1000)  # Should have 1000 rows
})
# 2. Test if the gender column contains only valid values (Male, Female)
test_that("Gender column contains only valid values", {
expect_true(all(body_mass_model$gender %in% c("Male", "Female")))
})
# 3. Test if age column is within the expected range (18 to 80 years)
test_that("Age column is within the expected range", {
expect_true(all(body_mass_model$age >= 18 & body_mass_model$age <= 80))
})
# 4. Test if height column has values greater than zero
test_that("Height column has positive values", {
expect_true(all(body_mass_model$height > 0))
})
# 5. Test if weight column has values greater than zero
test_that("Weight column has positive values", {
expect_true(all(body_mass_model$weight > 0))
})
# 6. Test if bmi column has valid values within a reasonable range (e.g., 10 to 50)
test_that("BMI column is within a reasonable range", {
expect_true(all(body_mass_model$bmi >= 10 & body_mass_model$bmi <= 70))
})
#### Preamble ####
# Purpose: Tests Body Composition data
# Author: Aamishi Avarsekar
# Date: 3rd December 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# This was written by ChatGPT
# Load necessary libraries for testing
library(testthat)
# 1. Test if the data frame has the correct number of rows and columns
test_that("Data frame has correct number of rows and columns", {
expect_equal(ncol(body_mass_model), 17)  # Should have 17 columns
expect_equal(nrow(body_mass_model), 1000)  # Should have 1000 rows
})
# 2. Test if the gender column contains only valid values (Male, Female)
test_that("Gender column contains only valid values", {
expect_true(all(body_mass_model$gender %in% c("Male", "Female")))
})
# 3. Test if age column is within the expected range (18 to 80 years)
test_that("Age column is within the expected range", {
expect_true(all(body_mass_model$age >= 18 & body_mass_model$age <= 80))
})
# 4. Test if height column has values greater than zero
test_that("Height column has positive values", {
expect_true(all(body_mass_model$height > 0))
})
# 5. Test if weight column has values greater than zero
test_that("Weight column has positive values", {
expect_true(all(body_mass_model$weight > 0))
})
# 6. Test if fat_mass_kg column has non-negative values
test_that("Fat mass column has non-negative values", {
expect_true(all(body_mass_model$fat_mass_kg >= 0))
})
#### Preamble ####
# Purpose: Tests Body Composition data
# Author: Aamishi Avarsekar
# Date: 3rd December 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# This was written by ChatGPT
# Load necessary libraries for testing
library(testthat)
body_mass_for_testing<- read_parquet("data/analysis_data/body_mass_data.parquet")
# 1. Test if the data frame has the correct number of rows and columns
test_that("Data frame has correct number of rows and columns", {
expect_equal(ncol(body_mass_for_testing), 17)  # Should have 17 columns
expect_equal(nrow(body_mass_for_testing), 1000)  # Should have 1000 rows
})
#### Preamble ####
# Purpose: Tests Body Composition data
# Author: Aamishi Avarsekar
# Date: 3rd December 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# This was written by ChatGPT
# Load necessary libraries for testing
library(testthat)
body_mass_for_testing<- read_parquet("data/analysis_data/body_mass_data.parquet")
# 2. Test if the gender column contains only valid values (Male, Female)
test_that("Gender column contains only valid values", {
expect_true(all(body_mass_for_testing$gender %in% c("Male", "Female")))
})
#### Preamble ####
# Purpose: Tests Body Composition data
# Author: Aamishi Avarsekar
# Date: 3rd December 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# This was written by ChatGPT
# Load necessary libraries for testing
library(testthat)
body_mass_for_testing<- read_parquet("data/analysis_data/body_mass_data.parquet")
# 3. Test if age column is within the expected range (18 to 80 years)
test_that("Age column is within the expected range", {
expect_true(all(body_mass_for_testing$age >= 18 & body_mass_for_testing$age <= 80))
})
# 4. Test if height column has values greater than zero
test_that("Height column has positive values", {
expect_true(all(body_mass_for_testing$height > 0))
})
# 5. Test if weight column has values greater than zero
test_that("Weight column has positive values", {
expect_true(all(body_mass_for_testing$weight > 0))
})
# 6. Test if fat_mass_kg column has non-negative values
test_that("Fat mass column has non-negative values", {
expect_true(all(body_mass_for_testing$fat_mass_kg >= 0))
})
# 8. Test if fat percentage categories are valid
test_that("Fat percentage category column contains valid categories", {
expect_true(all(body_mass_for_testing$fat_percentage_category %in% c("Low", "Moderate", "High", "Extreme")))
})
# 9. Test if bmi_category column contains valid categories
test_that("BMI category column contains valid categories", {
expect_true(all(body_mass_for_testing$bmi_category %in% c("Underweight", "Normal", "Overweight", "Obese")))
})
#### Preamble ####
# Purpose: Tests Body Composition data
# Author: Aamishi Avarsekar
# Date: 3rd December 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# This was written by ChatGPT
# Load necessary libraries for testing
library(testthat)
body_mass_for_testing<- read_parquet("data/analysis_data/body_mass_data.parquet")
# 3. Test if age column is within the expected range (18 to 80 years)
test_that("Age column is within the expected range", {
expect_true(all(body_mass_for_testing$age >= 18 & body_mass_for_testing$age <= 80))
})
# 4. Test if height column has values greater than zero
test_that("Height column has positive values", {
expect_true(all(body_mass_for_testing$height > 0))
})
# 5. Test if weight column has values greater than zero
test_that("Weight column has positive values", {
expect_true(all(body_mass_for_testing$weight > 0))
})
# 6. Test if fat_mass_kg column has non-negative values
test_that("Fat mass column has non-negative values", {
expect_true(all(body_mass_for_testing$fat_mass_kg >= 0))
})
# 8. Test if fat percentage categories are valid
test_that("Fat percentage category column contains valid categories", {
expect_true(all(body_mass_for_testing$fat_percentage_category %in% c("Low", "Moderate", "High", "Extreme")))
})
# 9. Test if bmi_category column contains valid categories
test_that("BMI category column contains valid categories", {
expect_true(all(body_mass_for_testing$bmi_category %in% c("underweight", "normal", "overweight", "obese")))
})
View(body_mass_for_testing)
#### Preamble ####
# Purpose: Tests Body Composition data
# Author: Aamishi Avarsekar
# Date: 3rd December 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# This was written by ChatGPT
# Load necessary libraries for testing
library(testthat)
body_mass_for_testing<- read_parquet("data/analysis_data/body_mass_data.parquet")
# 3. Test if age column is within the expected range (18 to 80 years)
test_that("Age column is within the expected range", {
expect_true(all(body_mass_for_testing$age >= 18 & body_mass_for_testing$age <= 80))
})
# 4. Test if height column has values greater than zero
test_that("Height column has positive values", {
expect_true(all(body_mass_for_testing$height > 0))
})
# 5. Test if weight column has values greater than zero
test_that("Weight column has positive values", {
expect_true(all(body_mass_for_testing$weight > 0))
})
# 6. Test if fat_mass_kg column has non-negative values
test_that("Fat mass column has non-negative values", {
expect_true(all(body_mass_for_testing$fat_mass_kg >= 0))
})
# 8. Test if fat percentage categories are valid
test_that("Fat percentage category column contains valid categories", {
expect_true(all(body_mass_for_testing$fat_percentage_category %in% c("Low", "Moderate", "High", "Extreme")))
})
# 9. Test if bmi_category column contains valid categories
test_that("BMI category column contains valid categories", {
expect_true(all(body_mass_for_testing$bmi_category %in% c("Underweight", "Moderate", "Overweight", "Obese")))
})
# 10. Test if height_category column contains valid categories
test_that("Height category column contains valid categories", {
expect_true(all(body_mass_for_testing$height_category %in% c("Short", "Average", "Tall")))
})
#### Preamble ####
# Purpose: Tests Body Composition data
# Author: Aamishi Avarsekar
# Date: 3rd December 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# This was written by ChatGPT
# Load necessary libraries for testing
library(testthat)
body_mass_for_testing<- read_parquet("data/analysis_data/body_mass_data.parquet")
# 3. Test if age column is within the expected range (18 to 80 years)
test_that("Age column is within the expected range", {
expect_true(all(body_mass_for_testing$age >= 18 & body_mass_for_testing$age <= 80))
})
# 4. Test if height column has values greater than zero
test_that("Height column has positive values", {
expect_true(all(body_mass_for_testing$height > 0))
})
# 5. Test if weight column has values greater than zero
test_that("Weight column has positive values", {
expect_true(all(body_mass_for_testing$weight > 0))
})
# 6. Test if fat_mass_kg column has non-negative values
test_that("Fat mass column has non-negative values", {
expect_true(all(body_mass_for_testing$fat_mass_kg >= 0))
})
# 8. Test if fat percentage categories are valid
test_that("Fat percentage category column contains valid categories", {
expect_true(all(body_mass_for_testing$fat_percentage_category %in% c("Low", "Moderate", "High", "Extreme")))
})
# 9. Test if bmi_category column contains valid categories
test_that("BMI category column contains valid categories", {
expect_true(all(body_mass_for_testing$bmi_category %in% c("Underweight", "Moderate", "Overweight", "Obese")))
})
# 11. Test if predicted_category column contains valid categories
test_that("Predicted category column contains valid categories", {
expect_true(all(body_mass_for_testing$predicted_category %in% c("Low", "Moderate", "High", "Extreme")))
})
# 12. Test if weight_category column contains valid categories
test_that("Weight category column contains valid categories", {
expect_true(all(body_mass_for_testing$weight_category %in% c("Underweight", "Normal", "Overweight", "Obese")))
})
# 13. Test if there are no missing values in the data frame
test_that("No missing values in the data", {
expect_true(all(!is.na(body_mass_for_testing)))
})
# 14. Test if body mass values are logically consistent (fat_mass_kg + ffm_kg should be close to weight)
test_that("Fat mass + Fat-free mass is close to weight", {
expect_true(all(abs((body_mass_for_testing$fat_mass_kg + body_mass_for_testing$ffm_kg) - body_mass_for_testing$weight) < 10))
})
# 15. Test if fat mass percentage is within a reasonable range (0 to 100)
test_that("Fat mass percentage is within a reasonable range", {
fat_percentage <- (body_mass_for_testing$fat_mass_kg / body_mass_for_testing$weight) * 100
expect_true(all(fat_percentage >= 0 & fat_percentage <= 100))
})
#### Preamble ####
# Purpose: Tests Body Composition data
# Author: Aamishi Avarsekar
# Date: 3rd December 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# This was written by ChatGPT
# Load necessary libraries for testing
library(testthat)
body_mass_for_testing<- read_parquet("data/analysis_data/body_mass_data.parquet")
# 3. Test if age column is within the expected range (18 to 80 years)
test_that("Age column is within the expected range", {
expect_true(all(body_mass_for_testing$age >= 18 & body_mass_for_testing$age <= 80))
})
# 4. Test if height column has values greater than zero
test_that("Height column has positive values", {
expect_true(all(body_mass_for_testing$height > 0))
})
# 5. Test if weight column has values greater than zero
test_that("Weight column has positive values", {
expect_true(all(body_mass_for_testing$weight > 0))
})
# 6. Test if fat_mass_kg column has non-negative values
test_that("Fat mass column has non-negative values", {
expect_true(all(body_mass_for_testing$fat_mass_kg >= 0))
})
# 8. Test if fat percentage categories are valid
test_that("Fat percentage category column contains valid categories", {
expect_true(all(body_mass_for_testing$fat_percentage_category %in% c("Low", "Moderate", "High", "Extreme")))
})
# 9. Test if bmi_category column contains valid categories
test_that("BMI category column contains valid categories", {
expect_true(all(body_mass_for_testing$bmi_category %in% c("Underweight", "Moderate", "Overweight", "Obese")))
})
# 11. Test if predicted_category column contains valid categories
test_that("Predicted category column contains valid categories", {
expect_true(all(body_mass_for_testing$predicted_category %in% c("Low", "Moderate", "High", "Extreme")))
})
# 12. Test if weight_category column contains valid categories
test_that("Weight category column contains valid categories", {
expect_true(all(body_mass_for_testing$weight_category %in% c("Underweight", "Normal", "Overweight", "Obese")))
})
# 13. Test if there are no missing values in the data frame
test_that("No missing values in the data", {
expect_true(all(!is.na(body_mass_for_testing)))
})
# 14. Test if body mass values are logically consistent (fat_mass_kg + ffm_kg should be close to weight)
test_that("Fat mass + Fat-free mass is close to weight", {
expect_true(all(abs((body_mass_for_testing$fat_mass_kg + body_mass_for_testing$ffm_kg) - body_mass_for_testing$weight) < 10))
})
# 15. Test if fat mass percentage is within a reasonable range (0 to 100)
test_that("Fat mass percentage is within a reasonable range", {
fat_percentage <- (body_mass_for_testing$fat_mass_kg / body_mass_for_testing$weight) * 100
expect_true(all(fat_percentage >= 0 & fat_percentage <= 100))
})
#### Preamble ####
# Purpose: Model for Measurements Data and Body Composition Data
# Author: Aamishi Avarsekar
# Date: 3rd Decemeber 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# Note: Aspects of this code was written with the aid of ChatGPT 4.0
# Works pace setup - packages needed
library(tidyverse)
library(rstanarm)
library(nnet)
library(randomForest)
library(tidyr)
#### Read data ####
cleaned_data_model <- read_parquet("data/analysis_data/measurements_analysis_data.parquet")
body_mass_model <- read_parquet("data/analysis_data/body_mass_data.parquet")
# Multinomial logistic regression model
measurements_model <- multinom(fat_percentage_category ~ height + gender + waist_hip_ratio + height_hip_ratio, data = cleaned_data_model)
cleaned_data_model$predicted_category <- predict(measurements_model, newdata = cleaned_data_model)
body_mass_model_bmi <- multinom(fat_percentage_category ~ height + gender + fm, data = body_mass_model)
body_mass_model$predicted_category <- predict(body_mass_model_bmi, newdata = body_mass_model)
#### Save model ####
write_parquet(cleaned_data_model, "data/analysis_data/measurements_analysis_data.parquet")
saveRDS(
measurements_model,
file = "models/measurements_model.rds"
)
write_parquet(body_mass_model, "data/analysis_data/body_mass_data.parquet")
saveRDS(
body_mass_model_bmi,
file = "models/body_mass_model_bmi.rds"
)
#| echo: false
#| eval: true
#| warning: false
#| message: false
measurements_tibble <- as_tibble(cleaned_data_model)
kable(measurements_tibble, caption = "Example Tibble Output")
View(cleaned_data_model)
#| echo: false
#| eval: true
#| warning: false
#| message: false
#|
measurements_tibble <- as_tibble(cleaned_data_model)
kable(measurements_tibble, caption = "The Measurements Data Set")
---
title: "Classification of Body Fat based on Physical Measurements and Body Composition"
