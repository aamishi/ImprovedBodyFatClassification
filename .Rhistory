bmi = original_bmi
)
#### Preamble ####
# Purpose: Cleans the Marriage License data
# Author: Aamishi Avarsekar
# Date: 19th September 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# Note: Aspects of this code was written with the aid of ChatGPT 4.0
# Work space setup
library(tidyverse)
library(janitor)
library(arrow)
library(dplyr)
#Read data
# 1. MEASUREMENTS DATA (AWS - BodyM)
measurements_subject_data <- read_parquet("data/raw_data/test_subject_data.parquet")
measurements_data <- read_parquet("data/raw_data/test_data.parquet")
#### Clean data ####
# 1. MEASUREMENTS DATA (AWS - BodyM)
combined_test_data <- merge(measurements_subject_data, measurements_data, by = "subject_id")
cleaned_test_data <- combined_test_data %>%
clean_names() %>%
mutate(waist_hip_ratio = waist / hip) %>%
mutate(original_bmi = weight_kg / (height_cm / 100)^2) %>%
mutate(subject_id = seq(1, nrow(combined_test_data))) %>%
select(-height) %>%
rename(
height = height_cm,
weight = weight_kg,
bmi = original_bmi
)
cleaned_test_data$gender <- as.numeric(factor(combined_test_data$gender, levels = c("male", "female"))) - 1
# Written with the help of ChatGPT with modifications
# Create a placeholder column with 2018 rows
cleaned_test_data$bmi_category <- factor(NA, levels = c("Underweight", "Normal", "Overweight", "Obese I"))
# Assign category based on original_bmi values
cleaned_test_data$bmi_category <- ifelse(cleaned_test_data$bmi < 18.5, "Underweight",
ifelse(cleaned_test_data$bmi < 25, "Normal",
ifelse(cleaned_test_data$bmi < 30, "Overweight", "Obese I")))
# Ensure 'category' is a factor with the correct levels
cleaned_test_data$bmi_category <- factor(cleaned_test_data$bmi_category, levels = c("Underweight", "Normal", "Overweight", "Obese I"))
#### Save data ####
write_parquet(cleaned_test_data, "data/analysis_data/test_analysis.parquet")
cleaned_data <- combined_data %>%
clean_names() %>%
mutate(waist_hip_ratio = waist / hip) %>%
mutate(original_bmi = weight_kg / (height_cm / 100)^2) %>%
mutate(subject_id = seq(1, nrow(combined_data))) %>%
select(-height) %>%
rename(
height = height_cm,
weight = weight_kg,
bmi = original_bmi
)
#### Preamble ####
# Purpose: Cleans the Marriage License data
# Author: Aamishi Avarsekar
# Date: 19th September 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# Note: Aspects of this code was written with the aid of ChatGPT 4.0
# Work space setup
library(tidyverse)
library(janitor)
library(arrow)
library(dplyr)
#Read data
# 1. MEASUREMENTS DATA (AWS - BodyM)
measurements_subject_data <- read_parquet("data/raw_data/measurements_subject_data.parquet")
measurements_data <- read_parquet("data/raw_data/measurements_data.parquet")
#### Clean data ####
# 1. MEASUREMENTS DATA (AWS - BodyM)
combined_data <- merge(measurements_subject_data, measurements_data, by = "subject_id")
cleaned_data <- combined_data %>%
clean_names() %>%
mutate(waist_hip_ratio = waist / hip) %>%
mutate(original_bmi = weight_kg / (height_cm / 100)^2) %>%
mutate(subject_id = seq(1, nrow(combined_data))) %>%
select(-height) %>%
rename(
height = height_cm,
weight = weight_kg,
bmi = original_bmi
)
cleaned_data$gender <- as.numeric(factor(combined_data$gender, levels = c("male", "female"))) - 1
# Written with the help of ChatGPT with modifications
# Create a placeholder column with 2018 rows
cleaned_data$bmi_category <- factor(NA, levels = c("Underweight", "Normal", "Overweight", "Obese I"))
# Assign category based on original_bmi values
cleaned_data$bmi_category <- ifelse(cleaned_data$bmi < 18.5, "Underweight",
ifelse(cleaned_data$bmi < 25, "Normal",
ifelse(cleaned_data$bmi < 30, "Overweight", "Obese I")))
# Ensure 'category' is a factor with the correct levels
cleaned_data$bmi_category <- factor(cleaned_data$bmi_category, levels = c("Underweight", "Normal", "Overweight", "Obese I"))
#### Save data ####
write_parquet(cleaned_data, "data/analysis_data/measurements_analysis_data.parquet")
#### Preamble ####
# Purpose: TODO
# Author: Aamishi Avarsekar
# Date: TODO
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
#### Workspace setup ####
library(tidyverse)
library(janitor)
library(arrow)
library(dplyr)
#### Read Data ####
# 2. BODY MASS DATA
body_mass_data_raw <- read_parquet("data/raw_data/body_mass_data.parquet")
#### Clean Data ####
body_mass_clean <- body_mass_data_raw %>%
clean_names() %>%
select(gender_m1f2, age, height_cm, w_kg, bmi, fat_mass_kg, fm, ffm_kg, bone_mass_kg, muscle_mass_kg) %>%
mutate(
bmi_category = case_when(
bmi < 18.5 ~ "Underweight",
bmi >= 18.5 & bmi <= 24.9 ~ "Normal weight",
bmi >= 25.0 & bmi <= 29.9 ~ "Overweight",
bmi >= 30.0 & bmi <= 34.9 ~ "Obese - Class I",
bmi >= 35.0 & bmi <= 39.9 ~ "Obese - Class II",
bmi >= 40.0 ~ "Obese - Class III"
)) %>%
rename(
height = height_cm,
weight = w_kg,
gender = gender_m1f2
)
#### Save data ####
write_parquet(body_mass_clean, "data/analysis_data/body_mass_data.parquet")
#### Preamble ####
# Purpose: Cleans the Marriage License data
# Author: Aamishi Avarsekar
# Date: 19th September 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# Note: Aspects of this code was written with the aid of ChatGPT 4.0
# Work space setup
library(tidyverse)
library(janitor)
library(arrow)
library(dplyr)
#Read data
# 1. MEASUREMENTS DATA (AWS - BodyM)
measurements_subject_data <- read_parquet("data/raw_data/test_subject_data.parquet")
measurements_data <- read_parquet("data/raw_data/test_data.parquet")
#### Clean data ####
# 1. MEASUREMENTS DATA (AWS - BodyM)
combined_test_data <- merge(measurements_subject_data, measurements_data, by = "subject_id")
cleaned_test_data <- combined_test_data %>%
clean_names() %>%
mutate(waist_hip_ratio = waist / hip) %>%
mutate(original_bmi = weight_kg / (height_cm / 100)^2) %>%
mutate(subject_id = seq(1, nrow(combined_test_data))) %>%
select(-height) %>%
rename(
height = height_cm,
weight = weight_kg,
bmi = original_bmi
)
cleaned_test_data$gender <- as.numeric(factor(combined_test_data$gender, levels = c("male", "female"))) - 1
# Written with the help of ChatGPT with modifications
# Create a placeholder column with 2018 rows
cleaned_test_data$bmi_category <- factor(NA, levels = c("Underweight", "Normal", "Overweight", "Obese I"))
# Assign category based on original_bmi values
cleaned_test_data$bmi_category <- ifelse(cleaned_test_data$bmi < 18.5, "Underweight",
ifelse(cleaned_test_data$bmi < 25, "Normal",
ifelse(cleaned_test_data$bmi < 30, "Overweight", "Obese I")))
# Ensure 'category' is a factor with the correct levels
cleaned_test_data$bmi_category <- factor(cleaned_test_data$bmi_category, levels = c("Underweight", "Normal", "Overweight", "Obese I"))
#### Save data ####
write_parquet(cleaned_test_data, "data/analysis_data/test_analysis.parquet")
View(cleaned_test_data)
View(cleaned_test_data)
cleaned_test_data %>%
select(subject_id, height, weight, bmi, bmi_category)
View(cleaned_test_data)
cleaned_test_data <- cleaned_test_data %>%
select(subject_id, height, weight, bmi, bmi_category)
View(cleaned_test_data)
#### Preamble ####
# Purpose: Cleans the Marriage License data
# Author: Aamishi Avarsekar
# Date: 19th September 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# Note: Aspects of this code was written with the aid of ChatGPT 4.0
# Work space setup
library(tidyverse)
library(janitor)
library(arrow)
library(dplyr)
#Read data
# 1. MEASUREMENTS DATA (AWS - BodyM)
measurements_subject_data <- read_parquet("data/raw_data/test_subject_data.parquet")
measurements_data <- read_parquet("data/raw_data/test_data.parquet")
#### Clean data ####
# 1. MEASUREMENTS DATA (AWS - BodyM)
combined_test_data <- merge(measurements_subject_data, measurements_data, by = "subject_id")
cleaned_test_data <- combined_test_data %>%
clean_names() %>%
mutate(waist_hip_ratio = waist / hip) %>%
mutate(original_bmi = weight_kg / (height_cm / 100)^2) %>%
mutate(subject_id = seq(1, nrow(combined_test_data))) %>%
select(-height) %>%
rename(
height = height_cm,
weight = weight_kg,
bmi = original_bmi
)
cleaned_test_data$gender <- as.numeric(factor(combined_test_data$gender, levels = c("male", "female"))) - 1
# Written with the help of ChatGPT with modifications
# Create a placeholder column with 2018 rows
cleaned_test_data$bmi_category <- factor(NA, levels = c("Underweight", "Normal", "Overweight", "Obese I"))
# Assign category based on original_bmi values
cleaned_test_data$bmi_category <- ifelse(cleaned_test_data$bmi < 18.5, "Underweight",
ifelse(cleaned_test_data$bmi < 25, "Normal",
ifelse(cleaned_test_data$bmi < 30, "Overweight", "Obese I")))
# Ensure 'category' is a factor with the correct levels
cleaned_test_data$bmi_category <- factor(cleaned_test_data$bmi_category, levels = c("Underweight", "Normal", "Overweight", "Obese I"))
# Selecting only: subject_id, gender, height, weight, bmi, bmi_category
cleaned_test_data <- cleaned_test_data %>%
select(subject_id, gender, height, weight, bmi, bmi_category)
#### Save data ####
write_parquet(cleaned_test_data, "data/analysis_data/test_analysis.parquet")
View(cleaned_test_data)
#### Preamble ####
# Purpose: Cleans the Marriage License data
# Author: Aamishi Avarsekar
# Date: 19th September 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# Note: Aspects of this code was written with the aid of ChatGPT 4.0
# Work space setup
library(tidyverse)
library(janitor)
library(arrow)
library(dplyr)
#Read data
# 1. MEASUREMENTS DATA (AWS - BodyM)
measurements_subject_data <- read_parquet("data/raw_data/test_subject_data.parquet")
measurements_data <- read_parquet("data/raw_data/test_data.parquet")
#### Clean data ####
# 1. MEASUREMENTS DATA (AWS - BodyM)
combined_test_data <- merge(measurements_subject_data, measurements_data, by = "subject_id")
cleaned_test_data <- combined_test_data %>%
clean_names() %>%
mutate(waist_hip_ratio = waist / hip) %>%
mutate(original_bmi = weight_kg / (height_cm / 100)^2) %>%
mutate(subject_id = seq(1, nrow(combined_test_data))) %>%
select(-height) %>%
rename(
height = height_cm,
weight = weight_kg,
bmi = original_bmi
)
cleaned_test_data$gender <- as.numeric(factor(combined_test_data$gender, levels = c("male", "female"))) - 1
# Written with the help of ChatGPT with modifications
# Create a placeholder column with 2018 rows
cleaned_test_data$bmi_category <- factor(NA, levels = c("Underweight", "Normal", "Overweight", "Obese I"))
# Assign category based on original_bmi values
cleaned_test_data$bmi_category <- ifelse(cleaned_test_data$bmi < 18.5, "Underweight",
ifelse(cleaned_test_data$bmi < 25, "Normal",
ifelse(cleaned_test_data$bmi < 30, "Overweight", "Obese I")))
# Ensure 'category' is a factor with the correct levels
cleaned_test_data$bmi_category <- factor(cleaned_test_data$bmi_category, levels = c("Underweight", "Normal", "Overweight", "Obese I"))
# Changing gender: 1 = male, 2 = female
# Selecting only: subject_id, gender, height, weight, bmi, bmi_category
cleaned_test_data <- cleaned_test_data %>%
select(subject_id, gender, height, weight, bmi, bmi_category) %>%
mutate(gender = case_when(
gender == 0 ~ "male",
gender == 1 ~ "female"))
#### Save data ####
write_parquet(cleaned_test_data, "data/analysis_data/test_analysis.parquet")
View(cleaned_test_data)
View(cleaned_test_data)
#### Preamble ####
# Purpose: Cleans the Marriage License data
# Author: Aamishi Avarsekar
# Date: 19th September 2024
# Contact: aamishi.avarsekar@mail.utoronto.ca
# License: MIT
# Note: Aspects of this code was written with the aid of ChatGPT 4.0
# Work space setup
library(tidyverse)
library(janitor)
library(arrow)
library(dplyr)
#Read data
# 1. MEASUREMENTS DATA (AWS - BodyM)
measurements_subject_data <- read_parquet("data/raw_data/test_subject_data.parquet")
measurements_data <- read_parquet("data/raw_data/test_data.parquet")
#### Clean data ####
# 1. MEASUREMENTS DATA (AWS - BodyM)
combined_test_data <- merge(measurements_subject_data, measurements_data, by = "subject_id")
cleaned_test_data <- combined_test_data %>%
clean_names() %>%
mutate(waist_hip_ratio = waist / hip) %>%
mutate(original_bmi = weight_kg / (height_cm / 100)^2) %>%
mutate(subject_id = seq(1, nrow(combined_test_data))) %>%
select(-height) %>%
rename(
height = height_cm,
weight = weight_kg,
bmi = original_bmi
)
cleaned_test_data$gender <- as.numeric(factor(combined_test_data$gender, levels = c("male", "female"))) - 1
# Written with the help of ChatGPT with modifications
# Create a placeholder column with 2018 rows
cleaned_test_data$bmi_category <- factor(NA, levels = c("Underweight", "Normal", "Overweight", "Obese I"))
# Assign category based on original_bmi values
cleaned_test_data$bmi_category <- ifelse(cleaned_test_data$bmi < 18.5, "Underweight",
ifelse(cleaned_test_data$bmi < 25, "Normal",
ifelse(cleaned_test_data$bmi < 30, "Overweight", "Obese I")))
# Ensure 'category' is a factor with the correct levels
cleaned_test_data$bmi_category <- factor(cleaned_test_data$bmi_category, levels = c("Underweight", "Normal", "Overweight", "Obese I"))
# Changing gender: 1 = male, 2 = female
# Selecting only: subject_id, gender, height, weight, bmi, bmi_category
cleaned_test_data <- cleaned_test_data %>%
select(subject_id, gender, height, weight, bmi, bmi_category) %>%
mutate(gender = case_when(
gender == 0 ~ "male",
gender == 1 ~ "female"),
model_1_predicted_categories = NA, # prepping model application
model_2_predicted_categories = NA
) # closing mutate fn
#### Save data ####
write_parquet(cleaned_test_data, "data/analysis_data/test_analysis.parquet")
View(cleaned_data)
View(cleaned_test_data)
# Works pace setup - packages needed
library(tidyverse)
library(rstanarm)
library(nnet)
source("~/UofT/5th/fall2024/2. sta304/ImprovedBMIFormula/scripts/103-test_data_EDA.R", echo=TRUE)
#### Preamble ####
# Purpose: Models... [...UPDATE THIS...]
# Author: Rohan Alexander [...UPDATE THIS...]
# Date: 11 February 2023 [...UPDATE THIS...]
# Contact: rohan.alexander@utoronto.ca [...UPDATE THIS...]
# License: MIT
# Pre-requisites: [...UPDATE THIS...]
# Any other information needed? [...UPDATE THIS...]
# Works pace setup - packages needed
library(tidyverse)
library(rstanarm)
library(nnet)
#### Read data ####
cleaned_data <- read_parquet("data/analysis_data/measurements_analysis_data.parquet")
# Multinomial logistic regression model
# subject_id, gender, height_cm, weight_kg, height, ankle, wrist, waist_hip_ratio, original_bmi
# Variables selected:
measurements_model <- multinom(bmi_category ~ height + gender + waist_hip_ratio + wrist + ankle, data = cleaned_data)
# Summary of the model
summary(measurements_model)
#### Save model ####
saveRDS(
measurements_model,
file = "models/measurements_model.rds"
)
#### Preamble ####
# Purpose: Models... [...UPDATE THIS...]
# Author: Rohan Alexander [...UPDATE THIS...]
# Date: 11 February 2023 [...UPDATE THIS...]
# Contact: rohan.alexander@utoronto.ca [...UPDATE THIS...]
# License: MIT
# Pre-requisites: [...UPDATE THIS...]
# Any other information needed? [...UPDATE THIS...]
#### Workspace setup ####
library(tidyverse)
library(rstanarm)
### Model data ####
library(nnet)
#### Read data ####
body_mass_read <- read_parquet("data/analysis_data/body_mass_data.parquet")
body_mass_model <- multinom(bmi_category ~ gender_m1f2 + fm , data = body_mass_read)
#### Preamble ####
# Purpose: Models... [...UPDATE THIS...]
# Author: Rohan Alexander [...UPDATE THIS...]
# Date: 11 February 2023 [...UPDATE THIS...]
# Contact: rohan.alexander@utoronto.ca [...UPDATE THIS...]
# License: MIT
# Pre-requisites: [...UPDATE THIS...]
# Any other information needed? [...UPDATE THIS...]
#### Workspace setup ####
library(tidyverse)
library(rstanarm)
### Model data ####
library(nnet)
#### Read data ####
body_mass_read <- read_parquet("data/analysis_data/body_mass_data.parquet")
body_mass_model <- multinom(bmi_category ~ gender + fm , data = body_mass_read)
#### Save model ####
saveRDS(
body_mass_model,
file = "models/body_mass_model.rds"
)
measurements_data_pred <- read_parquet("data/analysis_data/measurements_analysis_data.parquet")
# Model 2 Data
body_mass_data_pred <- read_parquet("data/analysis_data/body_mass_data.parquet")
cleaned_test_data <- read_parquet("data/analysis_data/test_analysis.parquet")
View(cleaned_data)
View(cleaned_test_data)
cleaned_test_data_predictions$model_1_predicted_categories <- predict(measurements_model, newdata = cleaned_test_data_predictions)
cleaned_test_data_predictions <- read_parquet("data/analysis_data/test_analysis.parquet")
cleaned_test_data_predictions$model_1_predicted_categories <- predict(measurements_model, newdata = cleaned_test_data_predictions)
measurements_data_predictions$model_1_predicted_categories <- predict(measurements_model, newdata = measurements_data_predictions)
measurements_data_predictions <- read_parquet("data/analysis_data/measurements_analysis_data.parquet")
measurements_data_predictions$model_1_predicted_categories <- predict(measurements_model, newdata = measurements_data_predictions)
View(measurements_data_predictions)
body_mass_data_predictions$model_2_predicted_categories <- predict(body_mass_model, newdata = body_mass_data_predictions)
body_mass_data_predictions <- read_parquet("data/analysis_data/body_mass_data.parquet")
body_mass_data_predictions$model_2_predicted_categories <- predict(body_mass_model, newdata = body_mass_data_predictions)
measurements_data_extracted <- measurements_data_predictions %>%
select(gender, height, weight, bmi, bmi_category, model_1_predicted_categories)
View(measurements_data_extracted)
body_mass_data_extracted <- body_mass_data_predictions %>%
select(gender, height, weight, bmi, bmi_category, model_2_predicted_categories)
View(body_mass_data_extracted)
df_long <- cleaned_data %>%
pivot_longer(cols = c(bmi_category, predicted_category),
names_to = "category_type",
values_to = "category")
model_1_long <- measurements_data_extracted %>%
pivot_longer(cols = c(bmi_category, model_1_predicted_categories),
names_to = "category_type",
values_to = "category")
ggplot(model_1_long, aes(x = original_bmi, fill = category_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ category, scales = "free") +
labs(title = "Distribution of Original vs Improved BMI by Category",
x = "BMI Value",
y = "Density") +
scale_fill_manual(values = c("blue", "green"))
ggplot(model_1_long, aes(x = bmi, fill = category_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ category, scales = "free") +
labs(title = "Distribution of Original vs Improved BMI by Category",
x = "BMI Value",
y = "Density") +
scale_fill_manual(values = c("blue", "green"))
model_2_long <- body_mass_data_extracted %>%
pivot_longer(cols = c(bmi_category, model_2_predicted_categories),
names_to = "category_type",
values_to = "category")
# Now you can plot the densities
ggplot(model_2_long, aes(x = bmi, fill = category_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ category, scales = "free") +
labs(title = "Distribution of Original vs Improved BMI by Category",
x = "BMI Value",
y = "Density") +
scale_fill_manual(values = c("blue", "green"))
ggplot(model_1_long, aes(x = bmi, fill = category_type)) +
geom_density(alpha = 0.5) +
facet_wrap(~ category, scales = "free") +
labs(title = "Distribution of Original vs Improved BMI by Category",
x = "BMI Value",
y = "Density") +
scale_fill_manual(values = c("blue", "green"))
model_1_long
table(Predicted = body_mass_data_predictions$model_2_predicted_categories, Actual = body_mass_data_predictions$bmi_category)
table(Predicted = measurements_data_predictions$model_1_predicted_categories, Actual = measurements_data_predictions$bmi_category)
# Convert the confusion matrix to proportions
conf_matrix_1_proportions <- conf_matrix_1 / sum(conf_matrix_1)
conf_matrix_1 <- table(Predicted = measurements_data_predictions$model_1_predicted_categories,
Actual = measurements_data_predictions$bmi_category)
# Convert the confusion matrix to proportions
conf_matrix_1_proportions <- conf_matrix_1 / sum(conf_matrix_1)
# Convert the confusion matrix to percentages
conf_matrix_1_percentages <- conf_matrix_1_proportions * 100
# View the proportions and percentages
conf_matrix_1_proportions
conf_matrix_1_percentages
conf_matrix_2 <- table(Predicted = body_mass_data_predictions$model_2_predicted_categories,
Actual = body_mass_data_predictions$bmi_category)
# Convert the confusion matrix to proportions
conf_matrix_2_proportions <- conf_matrix_2 / sum(conf_matrix_2)
# Convert the confusion matrix to percentages
conf_matrix_2_percentages <- conf_matrix_2_proportions * 100
# View the proportions and percentages
conf_matrix_2_proportions
conf_matrix_2_percentages
combined_matrix <- cbind(conf_matrix_1_proportions, conf_matrix_2_proportions)
# View the combined matrix (side-by-side comparison)
combined_matrix
conf_matrix_2 <- table(Predicted = body_mass_data_predictions$model_2_predicted_categories,
Actual = body_mass_data_predictions$bmi_category)
# Convert the confusion matrix to proportions
conf_matrix_2_proportions <- conf_matrix_2 / sum(conf_matrix_2)
# Convert the confusion matrix to percentages
conf_matrix_2_percentages <- conf_matrix_2_proportions * 100
# View the proportions and percentages
conf_matrix_2_proportions
conf_matrix_2_percentages
# Combine the two matrices side by side
combined_matrix <- cbind(conf_matrix_1_proportions, conf_matrix_2_proportions)
# View the combined matrix (side-by-side comparison)
combined_matrix
# Combine the two matrices vertically
combined_matrix_vertical <- rbind(conf_matrix_1_proportions, conf_matrix_2_proportions)
# View the combined matrix (stacked vertically)
combined_matrix_vertical
# Assign row names for better clarity
rownames(combined_matrix) <- c("Model 1 Predictions", "Model 2 Predictions")
rownames(combined_matrix) <- c("Model 1 Predictions", "Model 2 Predictions")
colnames(combined_matrix) <- c("Normal", "Obese", "Overweight", "Underweight", "Extreme")
combined_matrix_vertical <- rbind(conf_matrix_1_proportions, conf_matrix_2_proportions)
# View the combined matrix (stacked vertically)
combined_matrix_vertical
