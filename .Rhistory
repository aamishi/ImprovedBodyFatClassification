labs(title = "Comparison of Ankle and Wrist Measurements for Overweight and Obese BMI Categories") +
theme_minimal() +
scale_fill_manual(values = c("Overweight" = "lightcoral", "Obese" = "lightsalmon")) +
theme(legend.position = "none")
#| echo: false
#| eval: true
#| warning: false
#| message: false
cleaned_data_model$bmi_category <- factor(cleaned_data_model$bmi_category,
levels = c("Underweight", "Normal", "Overweight", "Obese"))
ggplot(cleaned_data_model, aes(x = gender, fill = bmi_category)) +
geom_bar(position = "fill") +  # 'fill' makes it a proportion plot
ylab("Proportion") +
xlab("Gender") +
labs(title = "Proportions of BMI Categories by Gender") +
scale_y_continuous(labels = scales::percent) +  # Converts y-axis to percentage format
theme_minimal()
# Combine both datasets
combined_data <- rbind(cleaned_data_model, body_mass_model)
View(cleaned_data_model)
View(body_mass_model)
View(body_mass_model)
View(body_mass_model)
# Combine both datasets
combined_data <- rbind(cleaned_test_data_predictions, body_mass_data_predictions)
View(body_mass_data_predictions)
# Combine both datasets
cleaned_test_extract <- cleaned_data_model %>%
select(gender, bmi_category, fat_percentage_category)
body_mass_extracted <- body_mass_model %>%
select(gender, bmi_category, fat_percentage_category)
combined_data <- rbind(cleaned_test_extract, body_mass_extracted)
# Count occurrences of each fat_percentage_category per dataset
library(dplyr)
category_counts <- combined_data %>%
group_by(dataset, fat_percentage_category) %>%
summarise(Count = n(), .groups = "drop")
# Combine both datasets
cleaned_test_extract <- cleaned_data_model %>%
select(gender, bmi_category, fat_percentage_category)
body_mass_extracted <- body_mass_model %>%
select(gender, bmi_category, fat_percentage_category)
combined_data <- rbind(cleaned_test_extract, body_mass_extracted)
cleaned_test_extract$dataset <- "Measurements"
body_mass_extracted$dataset <- "Body Data"
# Count occurrences of each fat_percentage_category per dataset
library(dplyr)
category_counts <- combined_data %>%
group_by(dataset, fat_percentage_category) %>%
summarise(Count = n(), .groups = "drop")
# Combine both datasets
cleaned_test_extract <- cleaned_data_model %>%
select(gender, bmi_category, fat_percentage_category)
body_mass_extracted <- body_mass_model %>%
select(gender, bmi_category, fat_percentage_category)
cleaned_test_extract$dataset <- "Measurements"
body_mass_extracted$dataset <- "Body Data"
combined_data <- rbind(cleaned_test_extract, body_mass_extracted)
# Count occurrences of each fat_percentage_category per dataset
library(dplyr)
category_counts <- combined_data %>%
group_by(dataset, fat_percentage_category) %>%
summarise(Count = n(), .groups = "drop")
# Create a bar plot to visualize the differences
library(ggplot2)
ggplot(category_counts, aes(x = fat_percentage_category, y = Count, fill = dataset)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Fat Percentage Categories Across Data1 and Data2",
x = "Fat Percentage Category", y = "Count") +
theme_minimal() +
scale_fill_manual(values = c("Data1" = "lightblue", "Data2" = "lightgreen"))
# Combine both datasets
cleaned_test_extract <- cleaned_data_model %>%
select(gender, bmi_category, fat_percentage_category)
body_mass_extracted <- body_mass_model %>%
select(gender, bmi_category, fat_percentage_category)
cleaned_test_extract$dataset <- "Measurements"
body_mass_extracted$dataset <- "Body Data"
combined_data <- rbind(cleaned_test_extract, body_mass_extracted)
# Count occurrences of each fat_percentage_category per dataset
library(dplyr)
category_counts <- combined_data %>%
group_by(dataset, fat_percentage_category) %>%
summarise(Count = n(), .groups = "drop")
# Create a bar plot to visualize the differences
library(ggplot2)
ggplot(category_counts, aes(x = fat_percentage_category, y = Count, fill = dataset)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Fat Percentage Categories Across Data1 and Data2",
x = "Fat Percentage Category", y = "Count") +
theme_minimal() +
scale_fill_manual(values = c("Measurements" = "lightblue", "Data2" = "lightgreen"))
proportions <- combined_data %>%
group_by(dataset, fat_percentage_category) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Proportion = Count / sum(Count))
# Create a bar plot to visualize the proportions
ggplot(proportions, aes(x = fat_percentage_category, y = Proportion, fill = dataset)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Proportional Comparison of Fat Percentage Categories Across Data1 and Data2",
x = "Fat Percentage Category", y = "Proportion") +
scale_y_continuous(labels = scales::percent) +  # Show proportions as percentages
theme_minimal() +
scale_fill_manual(values = c("Measurements" = "lightblue", "Data2" = "lightgreen"))
te a bar plot to visualize the differences
# Create a bar plot to visualize the differences
library(ggplot2)
ggplot(category_counts, aes(x = fat_percentage_category, y = Count, fill = dataset)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Fat Percentage Categories Across Data1 and Data2",
x = "Fat Percentage Category", y = "Count") +
theme_minimal() +
scale_fill_manual(values = c("Measurements" = "lightblue", "Body Data" = "lightgreen"))
# Create a bar plot to visualize the proportions
ggplot(proportions, aes(x = fat_percentage_category, y = Proportion, fill = dataset)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Proportional Comparison of Fat Percentage Categories Across Data1 and Data2",
x = "Fat Percentage Category", y = "Proportion") +
scale_y_continuous(labels = scales::percent) +  # Show proportions as percentages
theme_minimal() +
scale_fill_manual(values = c("Measurements" = "lightblue", "Data2" = "lightgreen"))
# Combine both datasets
cleaned_test_extract <- cleaned_data_model %>%
select(gender, bmi_category, fat_percentage_category)
body_mass_extracted <- body_mass_model %>%
select(gender, bmi_category, fat_percentage_category)
cleaned_test_extract$dataset <- "Measurements"
body_mass_extracted$dataset <- "Body Data"
combined_data <- rbind(cleaned_test_extract, body_mass_extracted)
# Count occurrences of each fat_percentage_category per dataset
library(dplyr)
category_counts <- combined_data %>%
group_by(dataset, fat_percentage_category) %>%
summarise(Count = n(), .groups = "drop")
# Create a bar plot to visualize the differences
library(ggplot2)
ggplot(category_counts, aes(x = fat_percentage_category, y = Count, fill = dataset)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Fat Percentage Categories Across Data1 and Data2",
x = "Fat Percentage Category", y = "Count") +
theme_minimal() +
scale_fill_manual(values = c("Measurements" = "lightblue", "Body Data" = "lightgreen"))
proportions <- combined_data %>%
group_by(dataset, fat_percentage_category) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Proportion = Count / sum(Count))
# Create a bar plot to visualize the proportions
ggplot(proportions, aes(x = fat_percentage_category, y = Proportion, fill = dataset)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Proportional Comparison of Fat Percentage Categories Across Data1 and Data2",
x = "Fat Percentage Category", y = "Proportion") +
scale_y_continuous(labels = scales::percent) +  # Show proportions as percentages
theme_minimal() +
scale_fill_manual(values = c("Measurements" = "lightblue", "Body Data" = "lightgreen"))
proportions <- combined_data %>%
group_by(dataset, predicted_category) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Proportion = Count / sum(Count))
# Combine both datasets
cleaned_test_extract <- cleaned_data_model %>%
select(gender, bmi_category, fat_percentage_category, predicted_category)
View(cleaned_data_model)
# Combine both datasets
cleaned_test_extract <- cleaned_data_model %>%
select(gender, bmi_category, fat_percentage_category)
body_mass_extracted <- body_mass_model %>%
select(gender, bmi_category, fat_percentage_category)
cleaned_test_extract$dataset <- "Measurements"
body_mass_extracted$dataset <- "Body Data"
combined_data <- rbind(cleaned_test_extract, body_mass_extracted)
# Count occurrences of each fat_percentage_category per dataset
library(dplyr)
category_counts <- combined_data %>%
group_by(dataset, fat_percentage_category) %>%
summarise(Count = n(), .groups = "drop")
# Create a bar plot to visualize the differences
library(ggplot2)
ggplot(category_counts, aes(x = fat_percentage_category, y = Count, fill = dataset)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Fat Percentage Categories Across Data1 and Data2",
x = "Fat Percentage Category", y = "Count") +
theme_minimal() +
scale_fill_manual(values = c("Measurements" = "lightblue", "Body Data" = "lightgreen"))
proportions <- combined_data %>%
group_by(dataset, fat_percentage_category) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Proportion = Count / sum(Count))
# Create a bar plot to visualize the proportions
ggplot(proportions, aes(x = fat_percentage_category, y = Proportion, fill = dataset)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Proportional Comparison of Fat Percentage Categories Across Data1 and Data2",
x = "Fat Percentage Category", y = "Proportion") +
scale_y_continuous(labels = scales::percent) +  # Show proportions as percentages
theme_minimal() +
scale_fill_manual(values = c("Measurements" = "lightblue", "Body Data" = "lightgreen"))
tibble(body_mass_model_bmi)
head(body_mass_model_bmi)
glimpse(body_mass_model_bmi)
View(body_mass_model)
head(body_mass_model)
# Recode gender levels
body_mass_model <- body_mass_model %>%
mutate(gender = factor(gender, levels = c(1, 2), labels = c("Male", "Female")))
# Boxplot for fm by gender
ggplot(body_mass_model, aes(x = gender, y = fm, fill = gender)) +
geom_boxplot() +
labs(title = "Fat Mass Distribution by Gender",
x = "Gender",
y = "Fat Mass (fm)") +
theme_minimal()
# Recode gender levels
body_mass_model <- body_mass_model %>%
mutate(gender = factor(gender, levels = c(1, 2), labels = c("Male", "Female")))
# Boxplot for fm by gender
ggplot(body_mass_model, aes(x = gender, y = fm, fill = gender)) +
geom_boxplot() +
labs(title = "Fat Mass Distribution by Gender",
x = "Gender",
y = "Fat Mass (fm)") +
theme_minimal() +
facet_wrap(~bmi_category)
# Recode gender levels
body_mass_model <- body_mass_model %>%
mutate(gender = factor(gender, levels = c(1, 2), labels = c("Male", "Female")))
# Boxplot for fm by gender
ggplot(body_mass_model, aes(x = gender, y = fm, fill = gender)) +
geom_boxplot() +
labs(title = "Fat Mass Distribution by Gender",
x = "Gender",
y = "Fat Mass (fm)") +
theme_minimal() +
facet_wrap(~fat_percentage_category)
# Recode gender levels
body_mass_model <- body_mass_model %>%
mutate(gender = factor(gender, levels = c(1, 2), labels = c("Male", "Female"))) %>%
mutate(fat_percentage_category = factor(fat_percentage_category,
levels = c("Low", "Moderate", "High", "Extreme")))
# Boxplot for fm by gender
ggplot(body_mass_model, aes(x = gender, y = fm, fill = gender)) +
geom_boxplot() +
labs(title = "Fat Mass Distribution by Gender",
x = "Gender",
y = "Fat Mass (fm)") +
theme_minimal() +
facet_wrap(~fat_percentage_category)
View(body_mass_model)
# Recode gender levels
body_mass_model %>%
mutate(gender = factor(gender, levels = c(1, 2), labels = c("Male", "Female"))) %>%
mutate(fat_percentage_category = factor(fat_percentage_category,
levels = c("Low", "Moderate", "High", "Extreme")))
# Boxplot for fm by gender
ggplot(body_mass_model, aes(x = gender, y = fm, fill = gender)) +
geom_boxplot() +
labs(title = "Fat Mass Distribution by Gender",
x = "Gender",
y = "Fat Mass (fm)") +
theme_minimal() +
facet_wrap(~fat_percentage_category)
#| include: false
#| warning: false
#| message: false
library(tidyverse)
library(janitor)
library(arrow)
library(dplyr)
library(caret)
library(knitr)
# reading the final datasets:
cleaned_data_model <- read_parquet(file = here::here("data/analysis_data/measurements_analysis_data.parquet"))
body_mass_model <- read_parquet(file = here::here("data/analysis_data/body_mass_data.parquet"))
# Recode gender levels
body_mass_model %>%
mutate(gender = factor(gender, levels = c(1, 2), labels = c("Male", "Female"))) %>%
mutate(fat_percentage_category = factor(fat_percentage_category,
levels = c("Low", "Moderate", "High", "Extreme")))
# Boxplot for fm by gender
ggplot(body_mass_model, aes(x = gender, y = fm, fill = gender)) +
geom_boxplot() +
labs(title = "Fat Mass Distribution by Gender",
x = "Gender",
y = "Fat Mass (fm)") +
theme_minimal() +
facet_wrap(~fat_percentage_category)
ggplot(body_mass_model, aes(x = fm, fill = gender)) +
geom_histogram(binwidth = 2, alpha = 0.6, position = "identity") +
facet_wrap(~ gender, scales = "free") +
labs(title = "Histogram of Fat Mass by Gender",
x = "Fat Mass (fm)",
y = "Count") +
theme_minimal()
ggplot(body_mass_model, aes(x = fm, fill = gender)) +
geom_histogram(binwidth = 2, alpha = 0.6, position = "identity") +
# facet_wrap(~ gender, scales = "free") +
labs(title = "Histogram of Fat Mass by Gender",
x = "Fat Mass (fm)",
y = "Count") +
theme_minimal()
# Recode gender levels
body_mass_model %>%
mutate(gender = factor(gender, levels = c(1, 2), labels = c("Male", "Female"))) %>%
mutate(fat_percentage_category = factor(fat_percentage_category,
levels = c("Low", "Moderate", "High", "Extreme"))) %>%
gender = as.factor(gender),
# Recode gender levels
body_mass_model %>%
mutate(gender = factor(gender, levels = c(1, 2), labels = c("Male", "Female"))) %>%
mutate(fat_percentage_category = factor(fat_percentage_category,
levels = c("Low", "Moderate", "High", "Extreme"))) %>%
mutate(
gender = as.factor(gender),
fat_percentage_category = as.factor(fat_percentage_category)
)
# Boxplot for fm by gender
ggplot(body_mass_model, aes(x = gender, y = fm, fill = gender)) +
geom_boxplot() +
labs(title = "Fat Mass Distribution by Gender",
x = "Gender",
y = "Fat Mass (fm)") +
theme_minimal() +
facet_wrap(~fat_percentage_category)
ggplot(body_mass_model, aes(x = gender, fill = fat_percentage_category)) +
geom_bar(position = "fill") +
labs(title = "Proportion of Fat Percentage Categories by Gender",
x = "Gender",
y = "Proportion") +
theme_minimal()
ggplot(body_mass_model, aes(x = fat_percentage_category, fill = gender)) +
geom_bar(position = "dodge") +
labs(title = "Fat Percentage Categories by Gender",
x = "Fat Percentage Category",
y = "Count") +
theme_minimal()
# Recode gender levels
body_mass_model %>%
mutate(gender = factor(gender, levels = c(1, 2), labels = c("Male", "Female"))) %>%
mutate(fat_percentage_category = factor(fat_percentage_category,
levels = c("Low", "Moderate", "High", "Extreme"))) %>%
mutate(
gender = as.factor(gender),
fat_percentage_category = as.factor(fat_percentage_category)
)
ggplot(body_mass_model, aes(x = gender, fill = fat_percentage_category)) +
geom_bar(position = "fill") +  # 'fill' makes it a proportion plot
ylab("Proportion") +
xlab("Gender") +
labs(title = "Proportions of BMI Categories by Gender") +
scale_y_continuous(labels = scales::percent) +  # Converts y-axis to percentage format
theme_minimal()
ggplot(body_mass_model, aes(x = weight, y = height, color = fm)) +
geom_point(size = 3) +
scale_color_viridis_c() + # Use a continuous color scale
labs(title = "Height vs Weight with Fat Mass",
x = "Weight",
y = "Height",
color = "Fat Mass (fm)") +
theme_minimal()
ggplot(body_mass_model, aes(x = weight, y = height, color = bmi)) +
geom_point(size = 3) +
scale_color_viridis_c() + # Use a continuous color scale
labs(title = "Height vs Weight with Fat Mass",
x = "Weight",
y = "Height",
color = "Fat Mass (fm)") +
theme_minimal()
ggplot(body_mass_model, aes(x = bmi, y = fm, color = heighy)) +
geom_point(size = 3) +
scale_color_viridis_c() + # Use a continuous color scale
labs(title = "Height vs Weight with Fat Mass",
x = "Weight",
y = "Height",
color = "Fat Mass (fm)") +
theme_minimal()
ggplot(body_mass_model, aes(x = bmi, y = fm, color = height)) +
geom_point(size = 3) +
scale_color_viridis_c() + # Use a continuous color scale
labs(title = "Height vs Weight with Fat Mass",
x = "Weight",
y = "Height",
color = "Fat Mass (fm)") +
theme_minimal()
ggplot(body_mass_model, aes(x = bmi, y = fm)) +
geom_point(size = 3) +
scale_color_viridis_c() + # Use a continuous color scale
labs(title = "Height vs Weight with Fat Mass",
x = "Weight",
y = "Height",
color = "Fat Mass (fm)") +
theme_minimal()
ggplot(body_mass_model, aes(x = bmi, y = fm)) +
geom_point(size = 3) +
scale_color_viridis_c() + # Use a continuous color scale
labs(title = "Height vs Weight with Fat Mass",
x = "bmi",
y = "fm",
color = "Fat Mass (fm)") +
theme_minimal()
ggplot(body_mass_model, aes(x = weight, y = height, color = fm, size = fm)) +
geom_point(alpha = 0.7) +
scale_color_viridis_c() +
scale_size_continuous(range = c(1, 10)) +
labs(title = "Height vs Weight with Fat Mass",
x = "Weight",
y = "Height",
color = "Fat Mass (fm)",
size = "Fat Mass (fm)") +
theme_minimal()
ggplot(body_mass_model, aes(x = bmi, y = fm, color = gender)) +
geom_point(alpha = 0.7) +
facet_wrap(~ gender) +
labs(title = "Fat Mass vs BMI by Gender",
x = "BMI",
y = "Fat Mass (fm)",
color = "Gender") +
theme_minimal()
ggplot(body_mass_model, aes(x = bmi, y = fm, fill = age)) +
geom_tile() +
scale_fill_viridis_c() +
labs(title = "Fat Mass and BMI Heatmap by Age",
x = "BMI",
y = "Fat Mass (fm)",
fill = "Age") +
theme_minimal()
library(ggplot2)
library(ggpubr)
body_mass_long <- body_mass_model %>%
pivot_longer(cols = c(fm, bmi), names_to = "measure", values_to = "value")
# Dual y-axis plot
ggplot(body_mass_long, aes(x = age, y = value, color = measure)) +
geom_line() +
labs(title = "Comparison of FM and BMI by Age",
x = "Age",
y = "Value",
color = "Measure") +
theme_minimal()
body_mass_long <- body_mass_model %>%
pivot_longer(cols = c(fm, bmi), names_to = "measure", values_to = "value")
# Dual y-axis plot
ggplot(body_mass_long, aes(x = weight, y = value, color = measure)) +
geom_line() +
labs(title = "Comparison of FM and BMI by Age",
x = "Age",
y = "Value",
color = "Measure") +
theme_minimal()
body_mass_long <- body_mass_model %>%
pivot_longer(cols = c(fm, bmi), names_to = "measure", values_to = "value")
# Dual y-axis plot
ggplot(body_mass_long, aes(x = muscle_mass_kg, y = value, color = measure)) +
geom_line() +
labs(title = "Comparison of FM and BMI by Age",
x = "Age",
y = "Value",
color = "Measure") +
theme_minimal()
body_mass_long <- body_mass_model %>%
pivot_longer(cols = c(fm, bmi), names_to = "measure", values_to = "value")
# Dual y-axis plot
ggplot(body_mass_long, aes(x = age, y = value, color = measure)) +
geom_point(alpha = 0.5) + # Optional: Add points for raw data
geom_smooth(se = FALSE, method = "loess", span = 0.5) + # Smoothed trendline
labs(title = "Smoothed Trends of FM and BMI by Age",
x = "Age",
y = "Value",
color = "Measure") +
theme_minimal()
body_mass_long <- body_mass_model %>%
pivot_longer(cols = c(fm, bmi), names_to = "measure", values_to = "value")
# Dual y-axis plot
ggplot(body_mass_long, aes(x = height, y = value, color = measure)) +
geom_point(alpha = 0.5) + # Optional: Add points for raw data
geom_smooth(se = FALSE, method = "loess", span = 0.5) + # Smoothed trendline
labs(title = "Smoothed Trends of FM and BMI by Age",
x = "Age",
y = "Value",
color = "Measure") +
theme_minimal()
body_mass_long <- body_mass_model %>%
pivot_longer(cols = c(fm, bmi), names_to = "measure", values_to = "value")
# Dual y-axis plot
ggplot(body_mass_long, aes(x = weight, y = value, color = measure)) +
geom_point(alpha = 0.5) + # Optional: Add points for raw data
geom_smooth(se = FALSE, method = "loess", span = 0.5) + # Smoothed trendline
labs(title = "Smoothed Trends of FM and BMI by Age",
x = "Age",
y = "Value",
color = "Measure") +
theme_minimal()
body_mass_long <- body_mass_model %>%
pivot_longer(cols = c(fm, bmi), names_to = "measure", values_to = "value")
# Dual y-axis plot
ggplot(body_mass_long, aes(x = weight, y = value, color = measure)) +
geom_point(alpha = 0.5) + # Optional: Add points for raw data
geom_smooth(se = FALSE, method = "loess", span = 0.5) + # Smoothed trendline
labs(title = "Smoothed Trends of FM and BMI by Age",
x = "Age",
y = "Value",
color = "Measure") +
theme_minimal() +
facet_wrap(~gender)
body_mass_long <- body_mass_model %>%
pivot_longer(cols = c(fm, bmi), names_to = "measure", values_to = "value")
# Dual y-axis plot
ggplot(body_mass_long, aes(x = weight, y = value, color = measure)) +
geom_point(alpha = 0.5) + # Optional: Add points for raw data
geom_smooth(se = FALSE, method = "loess", span = 0.5) + # Smoothed trendline
labs(title = "Smoothed Trends of FM and BMI by Age",
x = "weight",
y = "Value",
color = "Measure") +
theme_minimal() +
facet_wrap(~gender)
